import axios from "axios"
import { useContext, useState, useMemo, useCallback } from "react"
import NFTNameGeneratorContext from "./NFTNameGeneratorContext"
import { storeBlob } from "../lib/ipfs"
import transformTwitterHandle from "../lib/transformTwitterHandle"

const textToImage = require("text-to-image")

export const useNFTNameGenerator = () => useContext(NFTNameGeneratorContext)

export const NFTNameGeneratorProvider = ({ children }) => {
  const [description, setDescription] = useState<string>("")
  const [twitterHandle, setTwitterHandle] = useState<string>("")
  const [publicWallet, setPublicWallet] = useState<string>("")
  const [loading, setLoading] = useState<boolean>(false)
  const [showResults, setShowResults] = useState<boolean>(false)
  const [name, setName] = useState<string>("")
  const [imageURI, setImageURI] = useState<string>("")
  const [twitterId, setTwitterId] = useState<string>("")
  const [tokenId, setTokenId] = useState<string>("")
  const [startConfetti, setStartConfetti] = useState<boolean>(false)
  function dataURLtoFile(dataurl, filename) {
    const arr = dataurl.split(",")
    const mime = arr[0].match(/:(.*?);/)[1]
    const bstr = atob(arr[1])
    let n = bstr.length
    const u8arr = new Uint8Array(n)

    // eslint-disable-next-line no-plusplus
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n)
    }
    return new File([u8arr], filename, { type: mime })
  }

  const postTweet = useCallback(async () => {
    const response = await axios.post("/api/tweet", {
      twitterHandle,
      name,
    })
    return response
  }, [name, twitterHandle])
  const handleGenerateClick = useCallback(async () => {
    setLoading(true)

    // Usage example:
    const response = await axios.get("/api/randomName")
    const generated = response.data
    setName(generated)
    const dataUri = await textToImage.generate(generated, {
      debug: true,
      fontSize: 58,
      fontFamily: "Aileron",
      lineHeight: 58,
      margin: 5,
      customHeight: 500,
      maxWidth: 500,
      bgColor: "black",
      textColor: "white",
      textAlign: "center",
      verticalAlign: "center",
    })
    setImageURI(dataUri)
    const file = dataURLtoFile(dataUri, "a.png")
    const ipfsUrl = await storeBlob(file)

    const generatedBy = transformTwitterHandle(twitterHandle)
    setDescription(`${generated} generated by ${generatedBy}`)

    const receipt = (await axios.get("/api/mint", {
      params: {
        imageUri: ipfsUrl,
        name: generated,
        description: `${generated} generated by ${generatedBy}`,
      },
    })) as any

    if (!receipt?.error) {
      setStartConfetti(true)
      setTimeout(() => {
        setStartConfetti(false)
        setShowResults(true)
      }, 5000)
    }
    const tweetResponse = await postTweet()
    if (tweetResponse?.data?.data?.id) {
      setTwitterId(tweetResponse.data.data.id)
    }
    setLoading(false)
  }, [twitterHandle, postTweet])
  const value = useMemo(
    () => ({
      twitterHandle,
      setTwitterHandle,
      publicWallet,
      setPublicWallet,
      loading,
      setLoading,
      showResults,
      setShowResults,
      name,
      setName,
      imageURI,
      setImageURI,
      twitterId,
      setTwitterId,
      tokenId,
      setTokenId,
      handleGenerateClick,
      description,
      startConfetti,
    }),
    [
      twitterHandle,
      setTwitterHandle,
      publicWallet,
      setPublicWallet,
      loading,
      setLoading,
      showResults,
      setShowResults,
      name,
      setName,
      imageURI,
      setImageURI,
      twitterId,
      setTwitterId,
      tokenId,
      setTokenId,
      handleGenerateClick,
      description,
      startConfetti,
    ],
  )
  return (
    <NFTNameGeneratorContext.Provider value={value}>{children}</NFTNameGeneratorContext.Provider>
  )
}
